(define (deriv exp var) 
  (cond ((number? exp) 0) 
        ((variable? exp) (if (same-variable? exp var) 1 0)) 
        ((sum? exp) 
         (make-sum (deriv (addend exp) var) 
                   (deriv (augend exp) var))) 
        ((product? exp) 
         (make-sum (make-product (multiplier exp) 
                                 (deriv (multiplicand exp) var)) 
                   (make-product (deriv (multiplier exp) var) 
                                 (multiplicand exp))))
        ;more rules can be added here
        (else (error "unknown expression type -- DERIV" exp))))

(define (deriv exp var) 
  (cond ((number? exp) 0) 
        ((variable? exp) (if (same-variable? exp var) 1 0)) 
        (else ((get 'deriv (operator exp)) (operands exp) 
                                           var))))

(define (operator exp) (car exp))

(define (operands exp) (cdr exp))


(define (variable? x) 
  (symbol? x))


(define (same-variable? v1 v2) 
  (and (variable? v1) (variable? v2) (eq? v1 v2)))

; Solution

(define (install-deriv-package)
  ;; internal procedures
  (define (make-sum a1 a2) (list '+ a1 a2))
  (define (addend s) (car s))
  (define (augend s) (cadr s))

  (define (make-product m1 m2) (list '* m1 m2))
  (define (multiplier p) (car p))
  (define (multiplicand p) (cadr p))

  (define (deriv-sum exp var)
    (make-sum (deriv (addend exp) var)
              (deriv (augend exp) var)))

  (define (deriv-product exp var) 
    (make-sum 
      (make-product (multiplier exp)
                    (deriv (multiplicand  exp) var))
      (make-product (deriv (multiplier  exp) var)
                    (multiplicand exp))))

  ;; interface to the rest of the system
  (put 'deriv '+ deriv-sum)
  (put 'deriv '* deriv-product))


(display (deriv '(+ x 3) 'x))

(display (deriv '(* x y) 'x)) 

(display (deriv '(* (* x y) (+ x 3)) 'x)) 


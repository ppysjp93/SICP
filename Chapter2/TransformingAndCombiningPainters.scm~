

; Vector Constructor and Selectors

(define (make-vect x y)
  (list x y))

(define (xcor-vect v)
  (car v))

(define (ycor-vect v)
  (cadr v))

(define (add-vect v1 v2)
  (make-vect (+ (xcor-vect v1)
                (xcor-vect v2))
             (+ (ycor-vect v1)
                (ycor-vect v2))))

(define (sub-vect v1 v2)
  (make-vect (- (xcor-vect v1)
                (xcor-vect v2))
             (- (ycor-vect v1)
                (ycor-vect v2))))

(define (scale-vect s v)
  (make-vect (* s (xcor-vect v))
             (* s (ycor-vect v))))

(define (vector-to-posn v)

; Frame Constructor and Selectors

(define (make-frame origin edge1 edge2)
  (list origin edge1 edge2))

(define (origin-frame f)
  (car f))

(define (edge1-frame f)
  (cadr f))

(define (edge2-frame f)
  (caddr f))

(define (frame-coord-map frame)
  (lambda (v)
    (add-vect
     (origin-frame frame)
     (add-vect (scale-vect (xcor-vect v)
                           (edge1-frame frame))
               (scale-vect (ycor-vect v)
                           (edge2-frame frame))))))


  (make-posn (* horz-vp-size (xcor-vect v))  
             (* vert-vp-size (ycor-vect v))))

; Transforming and Combining Painters

(define (transform-painter painter origin corner1 corner2) 
  (lambda (frame) 
    (let ((m (frame-coord-map frame))) 
      (let ((new-origin (m origin))) 
        (painter (make-frame new-origin 
                             (sub-vect (m corner1) new-origin) 
                             (sub-vect (m corner2) new-origin)))))))

(define (flip-ver painter) 
  (transform-painter painter (make-vect 0.0 1.0) 
                             (make-vect 1.0 1.0) 
                            (make-vect 0.0 0.0)))

(paint (flip-ver einstein)) 


